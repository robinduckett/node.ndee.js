#!/usr/local/bin/node
var sys = require('sys');
var fs = require('fs');
var Script = process.binding('evals').Script;

Object.prototype.forEach = function(callback) {
  for (var i in this) {
    if (typeof this[i] !== "function")
      callback(this[i]);
  }
};

var Ndee = function() {
  this.http = require('http');
  this.config = require('./conf/ndee.conf').config;
  var parent = this;

  this.server = this.http.createServer(function(request, response) {
    var webroot = parent.config.document_root;
    parent.delegate_vhost(parent, request, response);
  });
  
  this.setup_listen();
  this.setup_vhosts();
};

Ndee.prototype.setup_listen = function() {
  if (!!this.config.path) this.server.listen(this.config.listen.path);
  else this.server.listen(
    this.config.listen.port,
    !this.config.listen.hostname ? undefined : this.config.listen.hostname
  );
};

Ndee.prototype.setup_vhosts = function() {
  var hostmatch = {};
    
  this.config.virtual_hosts.forEach(function(vhost) {
    if (vhost.aliases)
      hostmatch[vhost.host] = {'vhost': vhost, 'match': [].concat([vhost.host], vhost.aliases)};
    else
      hostmatch[vhost.host] = {'vhost': vhost, 'match': [vhost.host]};
  });
  
  this.hostmatch = hostmatch;
};

Ndee.prototype.delegate_vhost = function(parent, request, response) {
  var host = !!request.headers.host ? request.headers.host.split(':')[0] : 'localhost';
  var served = false;
  
  this.hostmatch.forEach(function(match) {
    match.match.forEach(function(vhost) {
      var hostm = new RegExp(vhost, "i");
    
      if (hostm.test(host) && served == false) {
        parent.serve(host, match.vhost, request, response);
        served = true;
      }
    });
  });
  
  if (served == false)
    parent.serve(host, null, request, response);
};

Ndee.prototype.serve_directory = function(dir, request, response, cb) {  
  var thiso = this;
  
  var dirtemplate = fs
    .readFileSync(__dirname + '/templates/directory_index.sjs');
    
  var files = fs.readdirSync(dir);
  var foundindex = '';
  
  files.forEach(function(file) {
    for (var i = 0, di = thiso.config.directory_indexes[i];
      i < thiso.config.directory_indexes.length;
      i++, di = thiso.config.directory_indexes[i]) {
        if (di == file) {
          foundindex = file;
        }
      }
  });
  
  if (foundindex !== '') {    
    this.serve_file(dir + foundindex, request, response, cb);
  } else {
    cb.call({data: this.__compile(dirtemplate, {dir: dir}), status: 200, type: 'text/html'});
  }
};

Ndee.prototype.serve_file = function(file, request, response, cb) {
  var thiso = this;
  
  fs.readFile(file, function(error, data) {
    if (error) {
      switch (error.errno) {
        case 21:
          if (request.url.substr(-1, 1) !== '/') {
            cb.call({data: '', status: 301, type: '', headers: {location: request.url+'/'}});
          } else {
            thiso.serve_directory(file, request, response, function() {
              cb.call({data: this.data, status: this.status, type: this.type});
            });
          }
          break;
        case 2:
          cb.call({data: 'Error 404: Not found', status: 404, type: 'text/html'});
          break;
        default:
          cb.call({data: 'Error ' + error.errno + ': ' + error.message, status: 500, type: 'text/html'});
          break;
      }
    } else {      
      if (file.substr(-4, 4) == ".sjs" || file.substr(-5, 5) == ".html") {
        cb.call({data: thiso.__compile(data, {}), status: 200, type: 'text/html'});
      } else {
        cb.call({data: data, status: 200, type: 'text/html'});
      }
    }
  });
}

Ndee.prototype.script_global = {};

Ndee.prototype.__compile = function(input, vars) {
  var thiso = this;
  var compile = arguments.callee;
  input = input.replace(/[\r\t\n]/g, " ");
  
  return function(vars) {    
    vars.puts = function(str) {
      output = output + str;
    };
    
    vars.require = require;
    vars.compile = compile;
    vars.global = thiso.script_global;
    vars.process = process;
    
    var m = input.split(/<\?sjs(.*?)\?>/g);
    var output = '';

    for (var i = 0; i < m.length; i++) {
      if (i%2 == 1) { // code
        var code = m[i].replace(/\s+/g, ' ').trim();
        try {
          Script.runInNewContext(code, vars);
        } catch(err) {
          output += 'SJS ' + err;
        }
      } else {
        output += m[i];
      }
    }
    
    return output;
  }(vars);
};

Ndee.prototype.status = function(code, options, request, response) {
  response.writeHead(code, options);
}

Ndee.prototype.serve = function(host, vhost, request, response) {
  var thiso = this;
  // sys.puts('Host: ' + host);
  // sys.puts('vHost: ' + vhost);
  // sys.puts(' ');
  // sys.puts('Host: ' + request.headers.host);
  // sys.puts('User Agent: ' + request.headers['user-agent']);
  // sys.puts(request.method + ' ' + request.url);
  
  if (vhost == null) {
    this.status(404, {'Content-Type': 'text/html'}, request, response);
    response.end('File not found');
  } else {
    
    function out(output, status, type, headers) {
      if (!headers) headers = {};
      headers['Content-Type'] = type;
      
      thiso.status(status, headers, request, response);
      response.end(output+'\n');
    }
    
    var mapped = this.config.document_root + vhost.document_root + request.url;
    
    this.serve_file(mapped, request, response, function() {
      if (this.headers) {
        out(this.data, this.status, this.type, this.headers);
      } else {
        out(this.data, this.status, this.type);
      }
    });
  }
};

var htserver = new Ndee();
